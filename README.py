import streamlit as st
import pandas as pd
from fpdf import FPDF
from datetime import datetime
from io import BytesIO
import os
import base64
from pathlib import Path

# Funci√≥n para limpiar caracteres incompatibles
def limpiar_pdf_texto(texto):
    reemplazos = {
        "‚ÇÄ": "0", "‚ÇÅ": "1", "‚ÇÇ": "2", "‚ÇÉ": "3", "‚ÇÑ": "4",
        "‚ÇÖ": "5", "‚ÇÜ": "6", "‚Çá": "7", "‚Çà": "8", "‚Çâ": "9",
        "‚Å∞": "0", "¬π": "1", "¬≤": "2", "¬≥": "3",
        "¬∞": " grados ", "¬∫": "", "‚Äú": '"', "‚Äù": '"',
        "‚Äò": "'", "‚Äô": "'", "‚Äì": "-", "‚Äî": "-", "‚Ä¢": "-",
        "‚Üí": "->", "‚Üê": "<-", "‚áí": "=>", "‚â†": "!=", "‚â•": ">=", "‚â§": "<=",
        "‚úì": "OK", "‚úÖ": "OK", "‚ùå": "NO"
    }
    for k, v in reemplazos.items():
        texto = texto.replace(k, v)
    return texto

# Configuraci√≥n general
st.set_page_config(page_title="LTS Lab Analyzer", layout="wide")
LOGO_PATH = "logopetrogas.png"

# Estilo visual
st.markdown("""
    <style>
        .stApp { background-color: #1e1e1e; color: white; }
        .stButton>button, .stDownloadButton>button {
            background-color: #0d6efd; color: white; border-radius: 8px; border: none;
        }
        input, textarea, .stTextInput, .stTextArea, .stNumberInput input {
            background-color: #2e2e2e !important; color: white !important; border: 1px solid #555 !important;
        }
        .stSelectbox div { background-color: #2e2e2e !important; color: white !important; }
    </style>
""", unsafe_allow_html=True)

# Mostrar logo
if Path(LOGO_PATH).exists():
    with open(LOGO_PATH, "rb") as f:
        logo_base64 = base64.b64encode(f.read()).decode("utf-8")
    st.markdown(f"""
        <div style='text-align:center;'>
            <img src='data:image/png;base64,{logo_base64}' width='200'/>
        </div>
    """, unsafe_allow_html=True)
else:
    st.warning("‚ö†Ô∏è No se encontr√≥ el logo 'logopetrogas.png'")

# T√≠tulo
st.markdown("<h2 style='text-align:center;'>üß™ LTS Lab Analyzer</h2>", unsafe_allow_html=True)

# Clase PDF
class PDF(FPDF):
    def header(self):
        if os.path.exists(LOGO_PATH):
            self.image(LOGO_PATH, 10, 8, 33)
        self.set_font("Arial", "B", 12)
        self.cell(0, 10, "INFORME DE AN√ÅLISIS DE LABORATORIO", 0, 1, "C")
        self.set_font("Arial", "", 10)
        self.cell(0, 10, f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M')}", 0, 1, "R")
        self.ln(5)

    def footer(self):
        self.set_y(-15)
        self.set_font("Arial", "I", 8)
        self.cell(0, 10, "Confidencial - Uso interno PETROGAS", 0, 0, "C")

    def add_section(self, title, content):
        self.set_font("Arial", "B", 11)
        self.cell(0, 10, title, 0, 1)
        self.set_font("Arial", "", 10)
        if isinstance(content, dict):
            for k, v in content.items():
                self.cell(0, 8, f"{k}: {v}", 0, 1)
        else:
            self.multi_cell(0, 8, str(content))
        self.ln(2)

# Funci√≥n para exportar PDF

def exportar_pdf(nombre, operador, explicacion, resultados, observaciones):
    pdf = PDF()
    pdf.add_page()
    pdf.add_section("Operador", limpiar_pdf_texto(operador))
    pdf.add_section("Explicaci√≥n t√©cnica", limpiar_pdf_texto(explicacion))
    pdf.add_section("Resultados", {k: limpiar_pdf_texto(str(v)) for k, v in resultados.items()})
    pdf.add_section("Observaciones", limpiar_pdf_texto(observaciones or "Sin observaciones."))
    output = pdf.output(dest='S').encode('latin-1', errors='ignore')
    st.download_button("‚¨áÔ∏è Descargar informe PDF", data=BytesIO(output), file_name=nombre, mime="application/pdf")

# üßæ BIENVENIDA PROFESIONAL - LTS Lab Analyzer

st.markdown("---")
st.markdown("<h3 style='text-align:center;'>üëã Bienvenido al sistema de an√°lisis de laboratorio de planta LTS</h3>", unsafe_allow_html=True)

st.markdown("""
#### üßæ 1. Objetivo General de la App

Esta herramienta permite:

- Registrar y validar an√°lisis f√≠sico-qu√≠micos del laboratorio.
- Generar informes PDF oficiales con logo institucional.
- Controlar par√°metros operativos clave para la eficiencia de planta.
- Interpretar los resultados frente a especificaciones t√©cnicas.

#### üìò 2. Instrucciones Paso a Paso

1. Seleccion√° el an√°lisis desde la pesta√±a correspondiente (Gas, Gasolina, MEG, etc.).
2. Ingres√° los valores medidos del an√°lisis.
3. Complet√° el nombre del operador y las observaciones si las hubiera.
4. Presion√° el bot√≥n **üìä Analizar** para verificar cumplimiento.
5. Descarg√° el informe en PDF con un clic.

#### üß™ 3. M√≥dulos Incluidos y Par√°metros

- **Gas Natural**: H‚ÇÇS y CO‚ÇÇ
- **Gasolina Estabilizada**: TVR, sales, agua y sedimentos
- **MEG / TEG**: pH, concentraci√≥n, cloruros
- **Agua Desmineralizada**: cloruros
- **Aminas**: concentraci√≥n, cloruros, carga √°cida

#### üéì 4. Importancia de los Par√°metros

- **Altos H‚ÇÇS** ‚Üí riesgo de corrosi√≥n severa y toxicidad.
- **CO‚ÇÇ elevado** ‚Üí ca√≠da de pH y corrosi√≥n en equipos.
- **Cloruros altos** ‚Üí incrustaciones, corrosi√≥n, fallas t√©rmicas.
- **TVR alto** ‚Üí riesgo de sobrepresi√≥n.
- **pH fuera de rango** ‚Üí descomposici√≥n de solventes.
- **Cargas √°cidas altas** ‚Üí saturaci√≥n del sistema de aminas.

#### üìÇ 5. Trazabilidad

Cada informe PDF incluye:

- Nombre del operador
- Fecha y hora del an√°lisis
- Par√°metros medidos
- Validaci√≥n por especificaci√≥n ‚úÖ‚ùå
- Observaciones cargadas por el operador
- Logo oficial de la empresa

#### üßë‚Äçüè´ 6. Modo de uso recomendado

- Compatible con navegadores web (Chrome, Edge, etc.).
- Puede ejecutarse en Streamlit Cloud o en una PC local.
- Ideal para uso en laboratorio de planta LTS con acceso a instrumentos y archivos.
""")


# PESTA√ëAS PARA LOS M√ìDULOS
tabs = st.tabs([
    "Gas Natural",
    "Gasolina Estabilizada",
    "MEG",
    "TEG",
    "Agua Desmineralizada",
    "Aminas"
])

# GAS NATURAL ‚Äì con limpieza de caracteres y exportaci√≥n PDF
with tabs[0]:
    st.subheader("üî• An√°lisis de Gas Natural")
    st.markdown("Evaluaci√≥n de gases √°cidos H‚ÇÇS y CO‚ÇÇ para control de corrosi√≥n y cumplimiento normativo.")
    st.markdown("""
    **üìå Rangos esperados:**
    - H‚ÇÇS ‚â§ 2.1 ppm  
    - CO‚ÇÇ ‚â§ 2.0 %
    """)
    st.latex("H_2S \\leq 2.1\\ ppm \\quad\\quad CO_2 \\leq 2\\ \\%")

with tabs[0]:
    st.subheader("üî• An√°lisis de Gas Natural")
    st.markdown("Evaluaci√≥n de gases √°cidos H2S y CO2 para control de corrosi√≥n y cumplimiento normativo.")
    st.latex("H_2S \\leq 2.1\\ ppm \\quad\\quad CO_2 \\leq 2\\ \\%")

    h2s = st.number_input("H‚ÇÇS (ppm)", 0.0, step=0.1, key="h2s_gas")
    co2 = st.number_input("CO‚ÇÇ (%)", 0.0, step=0.1, key="co2_gas")
    operador = st.text_input("üë§ Operador", key="op_gas")
    obs = st.text_area("üìù Observaciones", key="obs_gas")

    if st.button("üìä Analizar Gas"):
        resultados = {
            "H2S (ppm)": f"{h2s} - {'OK' if h2s <= 2.1 else 'NO'}",
            "CO2 (%)": f"{co2} - {'OK' if co2 <= 2 else 'NO'}"
        }

        st.dataframe(pd.DataFrame(resultados.items(), columns=["Par√°metro", "Valor"]))

        exportar_pdf(
            f"GasNatural_{operador}_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf",
            limpiar_pdf_texto(operador),
            limpiar_pdf_texto("Evaluaci√≥n de H2S y CO2 en gas tratado."),
            {k: limpiar_pdf_texto(str(v)) for k, v in resultados.items()},
            limpiar_pdf_texto(obs)
        )

# ‚õΩ GASOLINA ESTABILIZADA
with tabs[1]:
    st.subheader("‚õΩ An√°lisis de Gasolina Estabilizada")
    st.markdown("Validaci√≥n de par√°metros cr√≠ticos para evitar corrosi√≥n y sobrepresi√≥n.")
    st.markdown("""
    **üìå Rangos esperados:**
    - TVR ‚â§ 12 psia  
    - Sales ‚â§ 100 mg/m¬≤  
    - Agua y sedimentos ‚â§ 1 %
    """)

with tabs[1]:
    st.subheader("‚õΩ An√°lisis de Gasolina Estabilizada")
    st.markdown("Validaci√≥n de par√°metros cr√≠ticos para evitar corrosi√≥n y sobrepresi√≥n.")

    tvr = st.number_input("TVR (psia)", 0.0, step=0.1, key="tvr_gasolina")
    sales = st.number_input("Sales (mg/m¬≤)", 0.0, step=0.1, key="sales_gasolina")
    agua = st.number_input("Agua y sedimentos (%)", 0.0, step=0.1, key="agua_gasolina")
    operador = st.text_input("üë§ Operador", key="op_gasolina")
    obs = st.text_area("üìù Observaciones", key="obs_gasolina")

    if st.button("üìä Analizar Gasolina"):
        resultados = {
            "TVR": f"{tvr} - {'‚úÖ' if tvr <= 12 else '‚ùå'}",
            "Sales": f"{sales} - {'‚úÖ' if sales <= 100 else '‚ùå'}",
            "Agua y sedimentos": f"{agua} - {'‚úÖ' if agua <= 1 else '‚ùå'}"
        }
        st.dataframe(pd.DataFrame(resultados.items(), columns=["Par√°metro", "Valor"]))
        exportar_pdf(
            f"Gasolina_{operador}_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf",
            operador,
            "Evaluaci√≥n de TVR, sales y sedimentos en gasolina estabilizada.",
            resultados,
            obs
        )
# üß™ MEG
with tabs[2]:
    st.subheader("üß™ An√°lisis de MEG")
    st.markdown("An√°lisis del inhibidor de formaci√≥n de hidratos en el sistema. Control de corrosi√≥n y salinidad.")
    st.markdown("""
    **üìå Rangos esperados:**
    - pH entre 6.5 y 8  
    - Concentraci√≥n entre 60 y 84 %  
    - Cloruros ‚â§ 50 ppm
    """)

with tabs[2]:
    st.subheader("üß™ An√°lisis de MEG")
    st.markdown("An√°lisis del inhibidor de formaci√≥n de hidratos en el sistema. Control de corrosi√≥n y salinidad.")

    ph_meg = st.number_input("pH", 0.0, 14.0, step=0.01, key="ph_meg")
    conc_meg = st.number_input("Concentraci√≥n (%wt)", 0.0, 100.0, step=0.1, key="conc_meg")
    cl_meg = st.number_input("Cloruros (ppm)", 0.0, step=0.1, key="cl_meg")
    operador = st.text_input("üë§ Operador", key="op_meg")
    obs = st.text_area("üìù Observaciones", key="obs_meg")

    if st.button("üìä Analizar MEG"):
        resultados = {
            "pH": f"{ph_meg} - {'‚úÖ' if 6.5 <= ph_meg <= 8 else '‚ùå'}",
            "Concentraci√≥n": f"{conc_meg} - {'‚úÖ' if 60 <= conc_meg <= 84 else '‚ùå'}",
            "Cloruros": f"{cl_meg} - {'‚úÖ' if cl_meg <= 50 else '‚ùå'}"
        }
        st.dataframe(pd.DataFrame(resultados.items(), columns=["Par√°metro", "Valor"]))
        exportar_pdf(
            f"MEG_{operador}_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf",
            operador,
            "Evaluaci√≥n del MEG (inhibidor de hidratos) en planta LTS.",
            resultados,
            obs
        )

# üß™ TEG
with tabs[3]:
    st.subheader("üß™ An√°lisis de TEG")
    st.markdown("Control del glicol utilizado para deshidrataci√≥n de gas natural.")
    st.markdown("""
    **üìå Rangos esperados:**
    - pH entre 6.5 y 8.5  
    - Concentraci√≥n ‚â• 99 %  
    - Cloruros ‚â§ 50 ppm
    """)

with tabs[3]:
    st.subheader("üß™ An√°lisis de TEG")
    st.markdown("Control del glicol utilizado para deshidrataci√≥n de gas natural.")

    ph_teg = st.number_input("pH", 0.0, 14.0, step=0.01, key="ph_teg")
    conc_teg = st.number_input("Concentraci√≥n (%wt)", 0.0, 100.0, step=0.1, key="conc_teg")
    cl_teg = st.number_input("Cloruros (ppm)", 0.0, step=0.1, key="cl_teg")
    operador = st.text_input("üë§ Operador", key="op_teg")
    obs = st.text_area("üìù Observaciones", key="obs_teg")

    if st.button("üìä Analizar TEG"):
        resultados = {
            "pH": f"{ph_teg} - {'‚úÖ' if 6.5 <= ph_teg <= 8.5 else '‚ùå'}",
            "Concentraci√≥n": f"{conc_teg} - {'‚úÖ' if 99 <= conc_teg <= 100 else '‚ùå'}",
            "Cloruros": f"{cl_teg} - {'‚úÖ' if cl_teg <= 50 else '‚ùå'}"
        }
        st.dataframe(pd.DataFrame(resultados.items(), columns=["Par√°metro", "Valor"]))
        exportar_pdf(
            f"TEG_{operador}_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf",
            operador,
            "Evaluaci√≥n del TEG utilizado para deshidrataci√≥n de gas.",
            resultados,
            obs
        )
# üíß AGUA DESMINERALIZADA
with tabs[4]:
    st.subheader("üíß An√°lisis de Agua Desmineralizada")
    st.markdown("Evaluaci√≥n del agua utilizada en calderas o procesos sensibles. Cloruros bajos son esenciales para evitar corrosi√≥n.")
    st.markdown("""
    **üìå Rango esperado:**
    - Cloruros ‚â§ 10 ppm
    """)

with tabs[4]:
    st.subheader("üíß An√°lisis de Agua Desmineralizada")
    st.markdown("Evaluaci√≥n del agua utilizada en calderas o procesos sensibles. Cloruros bajos son esenciales para evitar corrosi√≥n.")

    cl_agua = st.number_input("Cloruros (ppm)", 0.0, step=0.1, key="cl_agua")
    operador = st.text_input("üë§ Operador", key="op_agua")
    obs = st.text_area("üìù Observaciones", key="obs_agua")

    if st.button("üìä Analizar Agua"):
        resultados = {
            "Cloruros": f"{cl_agua} - {'‚úÖ' if cl_agua <= 10 else '‚ùå'}"
        }
        st.dataframe(pd.DataFrame(resultados.items(), columns=["Par√°metro", "Valor"]))
        exportar_pdf(
            f"AguaDemi_{operador}_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf",
            operador,
            "Control de cloruros en agua desmineralizada para evitar incrustaciones y corrosi√≥n.",
            resultados,
            obs
        )

# ‚ò†Ô∏è AMINAS
with tabs[5]:
    st.subheader("‚ò†Ô∏è An√°lisis de Aminas")
    st.markdown("Evaluaci√≥n del solvente am√≠nico para remoci√≥n de gases √°cidos como CO‚ÇÇ y H‚ÇÇS. Control clave en unidades de endulzamiento.")
    st.markdown("""
    **üìå Rangos esperados:**
    - Concentraci√≥n entre 48 y 52 %  
    - Cloruros en amina ‚â§ 1000 ppm  
    - Cloruros en caldera ‚â§ 10 ppm  
    - Carga √°cida amina pobre ‚â§ 0.025 mol/mol  
    - Carga √°cida amina rica ‚â§ 0.45 mol/mol
    """)

with tabs[5]:
    st.subheader("‚ò†Ô∏è An√°lisis de Aminas")
    st.markdown("Evaluaci√≥n del solvente am√≠nico para remoci√≥n de gases √°cidos como CO‚ÇÇ y H‚ÇÇS. Control clave en unidades de endulzamiento.")

    conc_aminas = st.number_input("Concentraci√≥n (%wt)", 0.0, 100.0, step=0.1, key="conc_aminas")
    cl_aminas = st.number_input("Cloruros en amina (ppm)", 0.0, step=1.0, key="cl_aminas")
    cl_caldera = st.number_input("Cloruros en caldera (ppm)", 0.0, step=0.1, key="cl_caldera")
    carga_pobre = st.number_input("Carga √°cida amina pobre (mol/mol)", 0.0, step=0.001, key="carga_pobre")
    carga_rica = st.number_input("Carga √°cida amina rica (mol/mol)", 0.0, step=0.01, key="carga_rica")
    operador = st.text_input("üë§ Operador", key="op_aminas")
    obs = st.text_area("üìù Observaciones", key="obs_aminas")

    if st.button("üìä Analizar Aminas"):
        resultados = {
            "Concentraci√≥n": f"{conc_aminas} - {'‚úÖ' if 48 <= conc_aminas <= 52 else '‚ùå'}",
            "Cloruros en amina": f"{cl_aminas} - {'‚úÖ' if cl_aminas <= 1000 else '‚ùå'}",
            "Cloruros en caldera": f"{cl_caldera} - {'‚úÖ' if cl_caldera <= 10 else '‚ùå'}",
            "Carga √°cida pobre": f"{carga_pobre} - {'‚úÖ' if carga_pobre <= 0.025 else '‚ùå'}",
            "Carga √°cida rica": f"{carga_rica} - {'‚úÖ' if carga_rica <= 0.45 else '‚ùå'}"
        }
        st.dataframe(pd.DataFrame(resultados.items(), columns=["Par√°metro", "Valor"]))
        exportar_pdf(
            f"Aminas_{operador}_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf",
            operador,
            "Evaluaci√≥n de aminas en procesos de remoci√≥n de CO‚ÇÇ/H‚ÇÇS. Control de corrosi√≥n, carga √°cida y sales.",
            resultados,
            obs
        )

